"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpressFileuploadValidator = void 0;
var Validators = __importStar(require("./validators"));
var defaults_1 = require("./defaults");
var errors_1 = require("./errors");
var ExpressFileuploadValidator = /** @class */ (function () {
    function ExpressFileuploadValidator(options, errorMessages) {
        if (options === void 0) { options = {}; }
        if (errorMessages === void 0) { errorMessages = {}; }
        this.options = defaults_1.defaultOptions;
        this.errorMessages = defaults_1.defaultErrorMessages;
        this.setOptions(options);
        this.setErrorMessages(errorMessages);
    }
    ExpressFileuploadValidator.prototype.getOptions = function () {
        return this.options;
    };
    ExpressFileuploadValidator.prototype.setOptions = function (options) {
        this.options = __assign(__assign({}, defaults_1.defaultOptions), options);
    };
    ExpressFileuploadValidator.prototype.getErrorMessages = function () {
        return this.errorMessages;
    };
    ExpressFileuploadValidator.prototype.setErrorMessages = function (errorMessages) {
        this.errorMessages = __assign(__assign({}, defaults_1.defaultErrorMessages), errorMessages);
    };
    ExpressFileuploadValidator.prototype.validate = function (uploadedFiles) {
        var files;
        if (Array.isArray(uploadedFiles)) {
            files = uploadedFiles;
        }
        else {
            files = [uploadedFiles];
        }
        this.validateCount(files.length);
        this.validateFiles(files);
    };
    ExpressFileuploadValidator.prototype.validateCount = function (actualCount) {
        var options = this.getOptions();
        var errorMessages = this.getErrorMessages();
        var minCountValidationError = Validators.minCount(options.minCount, actualCount)(errorMessages.minCount);
        if (minCountValidationError !== null) {
            throw new errors_1.ExpressFileuploadValidatorErrors([minCountValidationError]);
        }
        var maxCountValidationError = Validators.maxCount(options.maxCount, actualCount)(errorMessages.maxCount);
        if (maxCountValidationError !== null) {
            throw new errors_1.ExpressFileuploadValidatorErrors([maxCountValidationError]);
        }
    };
    ExpressFileuploadValidator.prototype.validateFiles = function (files) {
        var abortEarly = this.getOptions().abortEarly;
        var errors = [];
        for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {
            var file = files_1[_i];
            var validationError = this.validateFile(file);
            if (validationError !== null) {
                errors.push(validationError);
                if (abortEarly) {
                    break;
                }
            }
        }
        if (errors.length > 0) {
            throw new errors_1.ExpressFileuploadValidatorErrors(errors);
        }
    };
    ExpressFileuploadValidator.prototype.validateFile = function (uploadedFile) {
        var validators = this.getValidators();
        for (var _i = 0, validators_1 = validators; _i < validators_1.length; _i++) {
            var validator = validators_1[_i];
            var validationError = validator(uploadedFile);
            if (validationError !== null) {
                return validationError;
            }
        }
        return null;
    };
    ExpressFileuploadValidator.prototype.getValidators = function () {
        var options = this.getOptions();
        var errorMessages = this.getErrorMessages();
        return [
            Validators.minSize(options.minSize)(errorMessages.minSize),
            Validators.maxSize(options.maxSize)(errorMessages.maxSize),
            Validators.allowedExtensions(options.allowedExtensions)(errorMessages.allowedExtensions),
            Validators.disallowedExtensions(options.disallowedExtensions)(errorMessages.disallowedExtensions),
            Validators.allowedMimetypes(options.allowedMimetypes)(errorMessages.allowedMimetypes),
            Validators.disallowedMimetypes(options.disallowedMimetypes)(errorMessages.disallowedMimetypes),
        ];
    };
    return ExpressFileuploadValidator;
}());
exports.ExpressFileuploadValidator = ExpressFileuploadValidator;
//# sourceMappingURL=express-fileupload-validator.js.map